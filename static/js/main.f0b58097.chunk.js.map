{"version":3,"sources":["components/SquareComponent.js","components/FieldComponent.js","components/ScoreComponent.js","components/TimerComponent.js","components/GameComponent.js","components/LandingComponent.js","App.js","index.js"],"names":["Square","props","checkMole","state","value","mole","console","log","score","this","className","onClick","Component","Field","i","hiragana","values","selection","Math","floor","random","push","tempValue","randomIndex","currentIndex","length","renderSquare","Score","Timer","secondsToTime","secs","divisorForSeconds","ceil","componentDidMount","timeLeftVar","seconds","setState","time","startTimer","timer","setInterval","countDown","clearInterval","s","Game","updateScore","renderScore","id","runHiragana","runKatakana","Landing","showGame","shouldShowGame","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0b58097.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/square.css';\n\nclass Square extends Component {\n    constructor (props) {\n        super();\n        this.state = {\n            value: props.value,\n            mole: \"あ\",\n            score: props.score\n        }\n    }\n\n    checkMole = () => {\n        if ( this.state.value == this.state.mole) {\n            console.log(\"You whacked the mole!\");\n        }\n        else {\n            console.log(\"Oops, try again!\");\n        }\n    }\n\n    render() {\n        console.log(\"Score is \" + this.state.score);\n        return (\n            <button className=\"square\" onClick={this.checkMole}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nexport default Square;","import React, { Component } from 'react';\nimport Square from './SquareComponent';\n\nclass Field extends Component {\n    constructor (props) {\n        super();\n        this.state = {\n            score: props.score\n        }\n    }\n    \n    renderSquare(i) {\n        return <Square value={i} score={this.props.score} />;\n    }\n\n    render() {\n        //Alphabet Bank\n        const hiragana = [\"あ\", \"い\", \"う\", \"え\", \"お\", \n                        　\"か\", \"き\", \"く\", \"け\", \"こ\", \n                          \"さ\", \"し\", \"す\", \"せ\", \"そ\", \n                        　\"た\", \"ち\", \"つ\", \"て\", \"と\", \n                        　\"な\", \"に\", \"ぬ\", \"ね\", \"の\", \n                        　\"は\", \"ひ\", \"ふ\", \"へ\", \"ほ\",\n                          \"ま\", \"み\", \"む\", \"め\", \"も\",\n                          \"や\", \"ゆ\", \"よ\", \n                        　\"ら\", \"り\", \"る\", \"れ\", \"ろ\", \n                        　\"わ\", \"を\", \"ん\" ];\n\n        const katakana = [\"ア\", \"イ\", \"ウ\", \"エ\", \"オ\", \n                        　\"カ\", \"キ\", \"ク\", \"ケ\", \"コ\", \n                          \"サ\", \"シ\", \"ス\", \"セ\", \"ソ\", \n                        　\"タ\", \"チ\", \"ツ\", \"テ\", \"ト\", \n                        　\"ナ\", \"ニ\", \"ヌ\", \"ネ\", \"ノ\", \n                        　\"ハ\", \"ヒ\", \"フ\", \"へ\", \"ホ\",\n                          \"マ\", \"ミ\", \"ム\", \"メ\", \"モ\",\n                          \"ヤ\", \"ユ\", \"ヨ\", \n                        　\"ラ\", \"リ\", \"ル\", \"レ\", \"ロ\", \n                        　\"ワ\", \"ヲ\", \"ン\" ];                \n\n        //Generate random letters for field\n        const values = [];\n        for (let i = 0; i < 24; i++) {\n            let selection = Math.floor(Math.random() * 24);\n            console.log(selection);\n            values.push(hiragana[selection]);\n        }\n        values.push(\"あ\");\n\n        console.log(values);\n\n        //Randomize letters on field\n        let currentIndex = values.length, tempValue, randomIndex;\n        while (currentIndex != 0) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            tempValue = values[currentIndex];\n            values[currentIndex] = values[randomIndex];\n            values[randomIndex] = tempValue;\n        }\n\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[0])}\n                    {this.renderSquare(values[1])}\n                    {this.renderSquare(values[2])}\n                    {this.renderSquare(values[3])}\n                    {this.renderSquare(values[4])}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[5])}\n                    {this.renderSquare(values[6])}\n                    {this.renderSquare(values[7])}\n                    {this.renderSquare(values[8])}\n                    {this.renderSquare(values[9])}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[10])}\n                    {this.renderSquare(values[11])}\n                    {this.renderSquare(values[12])}\n                    {this.renderSquare(values[13])}\n                    {this.renderSquare(values[14])}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[15])}\n                    {this.renderSquare(values[16])}\n                    {this.renderSquare(values[17])}\n                    {this.renderSquare(values[18])}\n                    {this.renderSquare(values[19])}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[20])}\n                    {this.renderSquare(values[21])}\n                    {this.renderSquare(values[22])}\n                    {this.renderSquare(values[23])}\n                    {this.renderSquare(values[24])}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Field;","import React, { Component } from 'react';\n\nclass Score extends Component {\n    render() {\n        return(\n            <div>\n                <h1>Score: {this.props.value}</h1>\n            </div>\n        );\n    }\n}\n\nexport default Score;","import React, { Component } from 'react';\n\nclass Timer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            time: {},\n            seconds: 60\n        };\n        this.timer = 0;\n    }\n\n    secondsToTime = (secs) => {\n        // let hours = Math.floor(secs / (60*60));\n\n        let divisorForMinutes = secs % (60*60);\n        // let minutes = Math.floor(divisorForMinutes / 60);\n\n        let divisorForSeconds = divisorForMinutes % 60;\n        let seconds = Math.ceil(divisorForSeconds);\n\n        let obj = {\n            // \"h\": hours,\n            // \"m\": minutes,\n            \"s\": seconds\n        };\n        return obj;\n    }\n\n    componentDidMount = () => {\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        this.setState( {time: timeLeftVar} );\n        this.startTimer();\n    }\n\n    startTimer = () => {\n        if (this.timer == 0 && this.state.seconds > 0) {\n            this.timer = setInterval(this.countDown, 1000);\n        }\n    }\n\n    countDown = () => {\n        //Remove one second, set state to cause re-render\n        let seconds = this.state.seconds - 1;\n        this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds\n        });\n\n        //Check if at 0\n        if (seconds == 0) {\n            clearInterval(this.timer);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                Time Left: {this.state.time.s}\n            </div>\n        );\n    }\n}\n\nexport default Timer;","import React, { Component } from 'react';\nimport Field from './FieldComponent';\nimport Score from './ScoreComponent';\nimport Timer from './TimerComponent';\n\nclass Game extends Component {\n    \n    constructor() {\n        super();\n\n        this.state = {\n            score: 0,\n        };\n    }\n\n    updateScore = (value) => {\n        this.setState( {score: this.state.score + value} );\n    }\n\n    renderScore = () => {\n        return <Score value={this.state.score} />;\n    }\n    \n    render () {\n        return(\n            <div>\n                <h1>Whack-a-\"Mole\"!</h1>\n\n                <p id=\"directions\">Choose your mode of play!</p>\n\n                <p>\n                    <button className=\"modes easy\" onClick={this.runHiragana}>Play in Hiragana</button>\n                    <button className=\"modes medium\" onClick={this.runKatakana}>Play in Katakana</button>\n                </p>\n\n                <Timer />\n                {this.renderScore()}\n                <Field score={this.state.score} />\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport Game from './GameComponent';\nimport '../styles/landing.css';\n\n\nclass Landing extends Component {\n    constructor() {\n        super();\n        this.state = {\n            shouldShowGame: false\n        };\n    }\n\n    showGame = () => {\n        console.log('Start game clicked');\n        this.setState({shouldShowGame: true});\n    };\n\n    render() {\n        if (this.state.shouldShowGame) {\n            return (\n                <Game />\n            );\n        }\n\n        return (\n            <div>\n                <button className=\"startButton\" onClick={this.showGame}>Start Game</button>\n            </div>\n        );\n    }\n}\n\nexport default Landing;","import React from 'react';\nimport './styles/index.css';\nimport Landing from './components/LandingComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Landing />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}