{"version":3,"sources":["components/SquareComponent.js","components/FieldComponent.js","components/ScoreComponent.js","components/TimerComponent.js","components/GameComponent.js","redux/ActionCreators.js","components/LandingComponent.js","redux/reducer.js","App.js","redux/configureStore.js","index.js"],"names":["Square","props","sendData","fieldValueCallback","state","value","className","onClick","this","Component","Field","callbackFromSquare","squareData","setState","sendScore","updateScore","mole","score","console","log","gameCallback","gameCallback2","i","hiragana","values","selection","Math","floor","random","push","tempValue","randomIndex","currentIndex","length","renderSquare","Score","Timer","secondsToTime","secs","divisorForSeconds","ceil","componentDidMount","timeLeftVar","seconds","time","startTimer","timer","setInterval","countDown","clearInterval","s","mapDispatchToProps","postScore","dispatch","Game","callbackFromField","fieldData","callbackFromField2","id","runHiragana","runKatakana","connect","Landing","showGame","shouldShowGame","initialState","Reducer","store","createStore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c74ba74.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/square.css';\n\nclass Square extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            value: props.value\n        }\n    }\n\n    sendData = () => {\n        this.props.fieldValueCallback(this.state.value);\n    }\n\n    render() {\n        return (\n            <button className=\"square\" onClick={this.sendData} >\n                {this.state.value}\n            </button>\n        );\n    }\n}\n\nexport default Square;","import React, { Component } from 'react';\nimport Square from './SquareComponent';\n\nclass Field extends Component { \n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\",\n            score: props.score,\n            mole: \"あ\"\n        }\n    }\n\n    renderSquare(i) {\n        return <Square value={i} fieldValueCallback={this.callbackFromSquare} />;\n    }\n\n    callbackFromSquare = (squareData) => {\n        this.setState({value: squareData});\n        // this.updateScore();\n        this.sendScore();\n    }\n\n    updateScore = () => {\n        if (this.state.value == this.state.mole) {\n            this.setState({score: this.state.score + 5});\n            console.log(\"You whacked the mole!\" + this.state.score);\n        }\n        else {\n            console.log(\"Oops, try again!\");\n        }\n        this.sendScore();\n    }\n\n    sendScore = () => {\n        this.props.gameCallback(this.state.score);\n        this.props.gameCallback2(this.state.value);\n    }\n\n    render() {\n        //Alphabet Bank\n        const hiragana = [\"あ\", \"い\", \"う\", \"え\", \"お\", \n                        　\"か\", \"き\", \"く\", \"け\", \"こ\", \n                          \"さ\", \"し\", \"す\", \"せ\", \"そ\", \n                        　\"た\", \"ち\", \"つ\", \"て\", \"と\", \n                        　\"な\", \"に\", \"ぬ\", \"ね\", \"の\", \n                        　\"は\", \"ひ\", \"ふ\", \"へ\", \"ほ\",\n                          \"ま\", \"み\", \"む\", \"め\", \"も\",\n                          \"や\", \"ゆ\", \"よ\", \n                        　\"ら\", \"り\", \"る\", \"れ\", \"ろ\", \n                        　\"わ\", \"を\", \"ん\" ];\n\n        const katakana = [\"ア\", \"イ\", \"ウ\", \"エ\", \"オ\", \n                        　\"カ\", \"キ\", \"ク\", \"ケ\", \"コ\", \n                          \"サ\", \"シ\", \"ス\", \"セ\", \"ソ\", \n                        　\"タ\", \"チ\", \"ツ\", \"テ\", \"ト\", \n                        　\"ナ\", \"ニ\", \"ヌ\", \"ネ\", \"ノ\", \n                        　\"ハ\", \"ヒ\", \"フ\", \"へ\", \"ホ\",\n                          \"マ\", \"ミ\", \"ム\", \"メ\", \"モ\",\n                          \"ヤ\", \"ユ\", \"ヨ\", \n                        　\"ラ\", \"リ\", \"ル\", \"レ\", \"ロ\", \n                        　\"ワ\", \"ヲ\", \"ン\" ];                \n\n        //Generate random letters for field\n        const values = [];\n        for (let i = 0; i < 24; i++) {\n            let selection = Math.floor(Math.random() * 24);\n            values.push(hiragana[selection]);\n        }\n        values.push(\"あ\");\n\n        //Randomize letters on field\n        let currentIndex = values.length, tempValue, randomIndex;\n        while (currentIndex != 0) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            tempValue = values[currentIndex];\n            values[currentIndex] = values[randomIndex];\n            values[randomIndex] = tempValue;\n        }\n\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[0])}\n                    {this.renderSquare(values[1])}\n                    {this.renderSquare(values[2])}\n                    {this.renderSquare(values[3])}\n                    {this.renderSquare(values[4])}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[5])}\n                    {this.renderSquare(values[6])}\n                    {this.renderSquare(values[7])}\n                    {this.renderSquare(values[8])}\n                    {this.renderSquare(values[9])}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[10])}\n                    {this.renderSquare(values[11])}\n                    {this.renderSquare(values[12])}\n                    {this.renderSquare(values[13])}\n                    {this.renderSquare(values[14])}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[15])}\n                    {this.renderSquare(values[16])}\n                    {this.renderSquare(values[17])}\n                    {this.renderSquare(values[18])}\n                    {this.renderSquare(values[19])}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(values[20])}\n                    {this.renderSquare(values[21])}\n                    {this.renderSquare(values[22])}\n                    {this.renderSquare(values[23])}\n                    {this.renderSquare(values[24])}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Field;","import React, { Component } from 'react';\n\nclass Score extends Component {\n    render() {\n        return(\n            <div>\n                <h1>Score: {this.props.value}</h1>\n            </div>\n        );\n    }\n}\n\nexport default Score;","import React, { Component } from 'react';\n\nclass Timer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            time: {},\n            seconds: 60\n        };\n        this.timer = 0;\n    }\n\n    secondsToTime = (secs) => {\n        // let hours = Math.floor(secs / (60*60));\n\n        let divisorForMinutes = secs % (60*60);\n        // let minutes = Math.floor(divisorForMinutes / 60);\n\n        let divisorForSeconds = divisorForMinutes % 60;\n        let seconds = Math.ceil(divisorForSeconds);\n\n        let obj = {\n            // \"h\": hours,\n            // \"m\": minutes,\n            \"s\": seconds\n        };\n        return obj;\n    }\n\n    componentDidMount = () => {\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        this.setState( {time: timeLeftVar} );\n        this.startTimer();\n    }\n\n    startTimer = () => {\n        if (this.timer == 0 && this.state.seconds > 0) {\n            this.timer = setInterval(this.countDown, 1000);\n        }\n    }\n\n    countDown = () => {\n        //Remove one second, set state to cause re-render\n        let seconds = this.state.seconds - 1;\n        this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds\n        });\n\n        //Check if at 0\n        if (seconds == 0) {\n            clearInterval(this.timer);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                Time Left: {this.state.time.s}\n            </div>\n        );\n    }\n}\n\nexport default Timer;","import React, { Component } from 'react';\nimport Field from './FieldComponent';\nimport Score from './ScoreComponent';\nimport Timer from './TimerComponent';\nimport { connect } from 'react-redux';\nimport { postScore } from '../redux/ActionCreators';\n\nconst mapStateToProps = state => {\n    return {\n        score: state.score\n    };\n};\n\nconst mapDispatchToProps = {\n    postScore: (score) => (postScore(score))\n};\n\nclass Game extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            score: 0,\n            mole: \"あ\"\n        };\n    }\n\n    callbackFromField = (fieldData) => {\n        this.setState({score: fieldData});\n        console.log(\"got new score\" + this.state.score);\n    }\n\n    callbackFromField2 = (fieldData) => {\n        this.setState({value: fieldData});\n        console.log(\"got new value\" + fieldData);\n        if (this.state.value == this.state.mole) {\n            this.setState({score: this.state.score + 10});\n            console.log(\"Aye, you whacked the mole!\" + this.state.score);\n        }\n        else {\n            console.log(\"Aye, try again!\");\n        }\n    }\n    \n    render () {\n        return(\n            <div>\n                <h1>Whack-a-\"Mole\"!</h1>\n\n                <p id=\"directions\">Choose your mode of play!</p>\n\n                <p>\n                    <button className=\"modes easy\" onClick={this.runHiragana}>Play in Hiragana</button>\n                    <button className=\"modes medium\" onClick={this.runKatakana}>Play in Katakana</button>\n                </p>\n\n                <Timer />\n                <Score value={this.state.score} />\n                <Field score={this.state.score} gameCallback={this.callbackFromField} gameCallback2={this.callbackFromField2}  />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import * as ActionTypes from './ActionTypes';\n\nexport const postScore = (score) => dispatch => {\n    \n}","import React, { Component } from 'react';\nimport Game from './GameComponent';\nimport '../styles/landing.css';\n\n\nclass Landing extends Component {\n    constructor() {\n        super();\n        this.state = {\n            shouldShowGame: false\n        };\n    }\n\n    showGame = () => {\n        console.log('Start game clicked');\n        this.setState({shouldShowGame: true});\n    };\n\n    render() {\n        if (this.state.shouldShowGame) {\n            return (\n                <Game />\n            );\n        }\n\n        return (\n            <div>\n                <button className=\"startButton\" onClick={this.showGame}>Start Game</button>\n            </div>\n        );\n    }\n}\n\nexport default Landing;","\n\nexport const initialState = {\n    score: 0\n};\n\nexport const Reducer = (state = initialState, action) => {\n    return state;\n};","import React from 'react';\nimport './styles/index.css';\nimport Landing from './components/LandingComponent';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\nfunction App() {\n  return (\n    <Provider store = {store}>\n      <div className=\"App\">\n          <Landing />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore } from 'redux';\nimport { Reducer, initialState } from './reducer';\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        Reducer,\n        initialState\n    );\n\n    return store;\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}